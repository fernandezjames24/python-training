
Question #1: what does the following code do?
def a(b, c, d): pass
Answer: defines a function, which does nothing - correct


Question #2: what is the output of the following code?
print(type([1,2]))
Answer: <class 'list'> - correct


Question #3: what gets printed?
def f(): pass
print(type(f()))
Answer: <class 'NoneType'> - correct


Question #4: what should the below code print?
print(type(1J))
Answer: <class 'complex'> - correct


Question #5: what is the output of the following code?
print(type(lambda:None))
Answer: <class 'function'> - correct


Question #6: what is the output of the below program?
a = [1,2,3,None,(),[],]
print(len(a))
Answer: 6 - correct


Question #7: what gets printed?
print(type(1/2))
Answer: <class 'float'> - correct


Question #8: What gets printed?
d = lambda p: p * 2
t = lambda p: p * 3
x = 2
x = d(x)
x = t(x)
x = d(x)
print(x)
Answer: 24 - correct


Question #9: What gets printed?
x = 4.5
y = 2
print(x//y)
Answer: 2.0 - correct


Question #10: What gets printed?
nums = set([1,1,2,3,3,3,4])
print(len(nums))
Answer: 4 - correct


Question #11: What gets printed?
x = True
y = False
z = False

if x or y and z:
    print("yes")
else:
    print("no")
Answer: yes - correct


Question #12: What gets printed?
x = True
y = False
z = False

if not x or y:
    print(1)
elif not x or not y and z:
    print(2)
elif not x or y or not y and x:
    print(3)
else:
    print(4)
Answer: 3 - correct


Question #13: If PYTHONPATH is set in the environment, which directories are searched for modules?
A) PYTHONPATH directory

B) current directory

C) home directory

D) installation dependent default path
Answer: A, B, and D - correct


Question #14: What gets printed?
counter = 1 

def doLotsOfStuff():
    
    global counter

    for i in (1, 2, 3): 
        counter += 1

doLotsOfStuff()

print(counter)
Answer: 4 - correct


Question #15: What gets printed?
print(r"\nwoow")
Answer: the text like exactly like this: \nwoow - correct


Question #16: What gets printed?
print("\x48\x49!")
Answer: HI! - correct


Question #17: What gets printed?
print(0xA + 0xa)
Answer: 20 - correct


Question #18: What gets printed?
class parent:
    def __init__(self, param):
        self.v1 = param

class child(parent):
    def __init__(self, param):
        self.v2 = param

obj = child(11)
print(obj.v1 + " " + obj.v2)
Answer: Error is generated by program - correct


Question #19: What gets printed?
class Account:
    def __init__(self, id):
        self.id = id
        id = 666 

acc = Account(123)
print(acc.id)
Answer: 123 - correct


Question #20: What gets printed?
name = "snow storm"

print(name[6:8])
Answer: to - correct


Question #21: What gets printed?
name = "snow storm"

name[5] = 'X'

print(name)
Answer: ERROR, this code will not run - correct


Question #22: Which numbers are printed?
for i in range(2):
    print(i)

for i in range(4,6):
    print(i)
Answer: 0, 1, 4, 5 - correct


Question #23: What sequence of numbers is printed?
values = [1, 2, 1, 3]
nums = set(values)

def checkit(num):
    if num in nums:
        return True
    else:
        return False

for i in  filter(checkit, values):
    print(i)
Answer: 1 2 1 3 - correct


Question #24: What sequence of numbers is printed?
values = [2, 3, 2, 4]

def my_transformation(num):
    return num ** 2

for i in  map(my_transformation, values):
    print(i)
Answer: 4 9 4 16 - correct


Question #25: What numbers get printed
import pickle

class account:
	def __init__(self, id, balance):
		self.id = id
		self.balance = balance
	def deposit(self, amount):
		self.balance += amount
	def withdraw(self, amount):
		self.balance -= amount

myac = account('123', 100)
myac.deposit(800)
myac.withdraw(500)

fd = open( "archive", "wb" ) 
pickle.dump( myac, fd)
fd.close()

myac.deposit(200)
print(myac.balance)

fd = open( "archive", "rb" ) 
myac = pickle.load( fd )
fd.close()

print(myac.balance)
Answer: 600 400 - correct


Question #26: What gets printed by the code snippet below?
import math

print(math.floor(5.5))
Answer: 5 - correct


Question #27: What gets printed by the code below?
class Person:
    def __init__(self, id):
        self.id = id

obama = Person(100)

obama.__dict__['age'] = 49

print(obama.age + len(obama.__dict__))
Answer: 51 - correct


Question #28: What gets printed?
x = "foo "
y = 2
print(x + y)
Answer: An exception is thrown - correct


Question #29: What gets printed?
def simpleFunction():
    "This is a cool simple function that returns 1"
    return 1

print(simpleFunction.__doc__[10:14])
Answer: cool - correct



Question #30: What does the code below do?
sys.path.append('/root/mods')
Answer: Adds a new directory to seach for python modules that are imported - correct


Question #31: What gets printed?
import re
sum = 0

pattern = 'back'
if re.match(pattern, 'backup.txt'):
    sum += 1
if re.match(pattern, 'text.back'):
    sum += 2
if re.search(pattern, 'backup.txt'):
    sum += 4
if re.search(pattern, 'text.back'):
    sum += 8

print(sum)
Answer: 13 - correct


Question #32: Which of the following print statements will print all the names in the list on a seperate line
names = ['Ramesh', 'Rajesh', 'Roger', 'Ivan', 'Nico']
Answer: print("\n".join(names)) - correct


Question #33: True or false? Code indentation must be 4 spaces when creating a code block?
if error:
    # four spaces of indent are used to create the block
    print(msg)
Answer: False - correct


Question #34: Assuming the filename for the code below is /usr/lib/python/person.py
and the program is run as:
python /usr/lib/python/person.py 

What gets printed?
class Person:
    def __init__(self):
        pass

    def getAge(self):
        print(__name__)

p = Person()
p.getAge()
Answer: __main__ - correct




Question #35: What gets printed
foo = {}
print(type(foo))
Answer: <class 'dict'> - correct


Question #36: What gets printed?
foo = (3, 4, 5)
print(type(foo))
Answer: <class 'tuple'> - correct


Question #37: What gets printed?
country_counter = {}

def addone(country):
    if country in country_counter:
        country_counter[country] += 1
    else:
        country_counter[country] = 1

addone('China')
addone('Japan')
addone('china')

print(len(country_counter))
Answer: 3 - correct


Question #38: What gets printed?
confusion = {}
confusion[1] = 1
confusion['1'] = 2
confusion[1] += 1

sum = 0
for k in confusion:
    sum += confusion[k]

print(sum)
Answer: 4 - correct


Question #39: What gets printed?
confusion = {}
confusion[1] = 1
confusion['1'] = 2
confusion[1.0] = 4

sum = 0
for k in confusion:
    sum += confusion[k]

print(sum)
Answer: 6 - correct


Question #40: What gets printed?
boxes = {}
jars = {}
crates = {}

boxes['cereal'] = 1
boxes['candy'] = 2
jars['honey'] = 4
crates['boxes'] = boxes
crates['jars'] = jars

print(len(crates[boxes]))
Answer: An exception is thrown - correct


Question #41: What gets printed?
numberGames = {}
numberGames[(1,2,4)] = 8
numberGames[(4,2,1)] = 10
numberGames[(1,2)] = 12

sum = 0
for k in numberGames:
    sum += numberGames[k]

print(len(numberGames) + sum)
Answer: 33 - correct


Question #42: What gets printed?
foo = {1:'1', 2:'2', 3:'3'}
foo = {}
print(len(foo))
Answer: 0 - correct


Question #43: What gets printed?
foo = {1:'1', 2:'2', 3:'3'}
del foo[1]
foo[1] = '10'
del foo[2]
print(len(foo))
Answer: 2 - correct


Question #44: What gets printed?
names = ['Amir', 'Barry', 'Chales', 'Dao']
print(names[-1][-1])
Answer: o - correct


Question #45: What gets printed?
names1 = ['Amir', 'Barry', 'Chales', 'Dao']
names2 = names1
names3 = names1[:]

names2[0] = 'Alice'
names3[1] = 'Bob'

sum = 0
for ls in (names1, names2, names3):
    if ls[0] == 'Alice':
        sum += 1
    if ls[1] == 'Bob':
        sum += 10

print(sum)
Answer: 12 - correct


Question #46: What gets printed?
names1 = ['Amir', 'Barry', 'Chales', 'Dao']

loc = names1.index("Edward")

print(loc)
Answer: An exception is thrown - correct


Question #47: What gets printed?
names1 = ['Amir', 'Barry', 'Chales', 'Dao']

if 'amir' in names1:
    print(1)
else:
    print(2)
Answer: 2 - correct


Question #48: What gets printed?
names1 = ['Amir', 'Barry', 'Chales', 'Dao']
names2 = [name.lower() for name in names1]

print(names2[2][0])
Answer: c - correct


Question #49: What gets printed?
numbers = [1, 2, 3, 4]

numbers.append([5,6,7,8])

print(len(numbers))
Answer: 5 - correct


Question #50: Which of the following data structures can be used with the "in" operator to check if an item is in the data structure?
Answer: All of the above - correct


Question #51: What gets printed?
list1 = [1, 2, 3, 4]
list2 = [5, 6, 7, 8]

print(len(list1 + list2))
Answer: 8 - correct


Question #52: What gets printed?
def addItem(listParam):
    listParam += [1]

mylist = [1, 2, 3, 4]
addItem(mylist)
print(len(mylist)
Answer: 5 - correct


Question #53: What gets printed?
my_tuple = (1, 2, 3, 4)
my_tuple.append( (5, 6, 7) )
print(len(my_tuple))
Answer: An exception is thrown - correct


Question #54: What gets printed?
a = 1
b = 2
a,b = b,a

output = "{} {}".format(a, b)
print(output)
Answer: 2 1 - correct


Question #55: What gets printed?
def print_header(str):
    print("+++" + str + "+++")


print_header.category = 1
print_header.text = "some info"

print_header("{} and {}".format(print_header.category, print_header.text))
Answer: +++1 and some info+++ - correct


Question #56: What gets printed?
def dostuff(param1, *param2):
   print(type(param2))

dostuff('apples', 'bananas', 'cherry', 'dates')
Answer: <class 'tuple'> - correct


Question #57: What gets printed?
def dostuff(param1, **param2):
   print(type(param2))


dostuff('capitals', Arizona='Phoenix',
California='Sacramento', Texas='Austin')
Answer: <class 'dict'> - correct


Question #58: What gets printed?
def myfunc(x, y, z, a):
    print(x + y)

nums = [1, 2, 3, 4]

myfunc(*nums)
Answer: 3 - correct


Question #59: How do you create a package so that the following reference will work?
p = mytools.myparser.MyParser()
Answer: Inside the mytools dir create a __init__.py and myparser.py - correct


Question #60: What gets printed?class A:
    def __init__(self, a, b, c):
        self.x = a + b + c

a = A(1,2,3)
b = getattr(a, 'x')
setattr(a, 'x', b+1)
print(a.x)
Answer: 7 - correct


Question #61: What gets printed?
class NumFactory:
    def __init__(self, n):
        self.val = n
    def timesTwo(self):
        self.val *= 2
    def plusTwo(self):
        self.val += 2

f = NumFactory(2)
for m in dir(f):
    mthd = getattr(f,m)
    if callable(mthd):
        mthd()

print(f.val)
Answer: An exception is thrown - correct


Question #62: What gets printed?
one = chr(104)
two = chr(105)
print(one + two)
Answer: hi - correct


Question #63: What gets printed?
x = 1
y = "2"
z = 3

sum = 0
for i in (x,y,z):
    if isinstance(i, int):
        sum += i
print(sum)
Answer: 4 - correct


Question #64: What gets printed?
x = sum(range(5))
print(x)
Answer: 10 - correct


Question #65: What gets printed?
kvps = { '1' : 1, '2' : 2 }
theCopy = kvps

kvps['1'] = 5

sum = kvps['1'] + theCopy['1']
print(sum)
Answer: 10 - correct


Question #66: What gets printed?
kvps = { '1' : 1, '2' : 2 }
theCopy = kvps.copy()

kvps['1'] = 5

sum = kvps['1'] + theCopy['1']
print(sum)
Answer: 6 - correct


Question #67: What gets printed
aList = [1,2]
bList = [3,4]

kvps = { '1' : aList, '2' : bList }
theCopy = kvps.copy()

kvps['1'][0] = 5

sum = kvps['1'][0] + theCopy['1'][0]
print(sum)
Answer: 10 - correct


Question #68: What gets printed?
import copy

aList = [1,2]
bList = [3,4]

kvps = { '1' : aList, '2' : bList }
theCopy = copy.deepcopy(kvps)

kvps['1'][0] = 5

sum = kvps['1'][0] + theCopy['1'][0]
print(sum)
Answer: 6 - correct


Question #69: What gets printed?
kvps = { '1' : 1, '2' : 2 }
theCopy = dict(kvps)

kvps['1'] = 5

sum = kvps['1'] + theCopy['1']
print(sum)
Answer: 6 - correct


Question #70: What gets printed?
kvps = { '1' : 1, '2' : 2 , '3' : 3, '4' : 4, '5' : 5}
newData = { '1' : 10, '3' : 30 }

kvps.update(newData)

x = sum(kvps.values())

print(x)
Answer: 51 - correct


Question #71: What gets printed assuming the user enters 'foo' at the prompt?
a = input("#: ")

print (a)
Answer: foo - correct


Question #72: What gets printed?
import numpy as np

ary = np.array([1,2,3,5,8])

ary = ary + 1

print (ary[1])
Answer: 3 - correct


Question #73: What gets printed?
import numpy as np

a = np.array([1,2,3,5,8])
b = np.array([0,3,4,2,1])
c = a + b
c = c*a

print (c[2])
Answer: 21 - correct


Question #74: What gets printed?
import numpy as np

a = np.array([1,2,3,5,8])
print (a.ndim)
Answer: 1 - correct


Question #75: What gets printed?
import numpy as np

a = np.array([[1,2,3],[0,1,4]])
print (a.size)
Answer: 6 - correct


Question #76: What gets printed?
import numpy as np

a = np.array([[1,2,3],[0,1,4]])
b = np.zeros((2,3), dtype=np.int16)
c = np.ones((2,3), dtype=np.int16)
d = a + b + c
print (d[1,2] )
Answer: 5 - correct


Question #77: What gets printed?
import numpy as np

a = np.array([1,2,3,4,5])
b = np.arange(0,10,2)
c = a + b
print (c[4])
Answer: 13 - correct


Question #78: What gets printed?
import numpy as np

a = np.zeros(6)
b = np.arange(0,10,2)
c = a + b
print (c[4])
Answer: An exception is thrown - correct




Question #79: What gets printed?
import numpy as np

a = np.array([[0, 1, 0], [1, 0, 1]])
a += 3
b = a + 3
print (a[1,2] + b[1,2])
Answer: 11 - correct


Question #80: What gets printed?
import numpy as np

a = np.array([[0, 1, 2], [3, 4, 5]])
b = a.sum(axis=1)
print (b)
Answer: [3 12] - correct


Question #81: What gets printed?
import numpy as np

a = np.array([[0, 1, 2], [3, 4, 5]])
b = a.ravel()
print (b[0,0])
Answer: An exception is thrown - correct














